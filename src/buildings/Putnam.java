package buildings;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;

import javax.media.opengl.GL;

import util.Util;

import com.sun.opengl.util.BufferUtil;

/**
 * Putnam University Center
 * 
 * THIS JAVADOC OR SOME OTHER COMMENT SHOULD CONTAIN DETAILS LIKE POSITION AND DIMENSIONS OF THE BUILDING
 */
public class Putnam extends Building {


	static double floor1 = 20; //floor 1 height
	static double floor2 = 20; //floor 2 height
	static double floor3 = 20; //floor 3 height
	static double h1 = floor1;
	static double h2 = floor1 + floor2;
	static double h3 = h2 + floor3;
	
	double longitude;
	double latitude;
	double elevation;
	double [] position = Util.coordToGL(longitude, latitude, elevation);
    public DoubleBuffer vertBuffer;
    public DoubleBuffer colorBuffer;
    public DoubleBuffer normalBuffer;
    public ByteBuffer faceBuffer;
	
	//1st Floor
	/*First Floor
	 v0 = 0, 0, 0
	 v1 = 0, 0, 117+8./12
	 v2 = 167+7./12, 0, 117+8./12
	 v3 = 167+7./12, 0, 45+8./12
	 v4 = 179+7./12, 0, 45+8./12
	 v5 = 179+7./12, 0, 10
	 v6 = 167+7./12, 0, 10
	 v7 = 167+7./12, 0, 0
	 v8 = 71+10./12, 0, 0
	 v9 = 71+10.12, 0, 22+1./12
	 v10 = 47+9./12, 0, 22+1./12
	 v11 = 47+9./12, 0, 0
	 
	 v12 = 0, h1, 0
	 v13 = 0, h1, 117+8./12
	 v14 = 167+7./12, h1, 117+8./12
	 v15 = 167+7./12, h1, 45+8./12
	 v16 = 179+7./12, h1, 45+8./12
	 v17 = 179+7./12, h1, 10
	 v18 = 167+7./12, h1, 10
	 v19 = 167+7./12, h1, 0
	 v20 = 71+10./12, h1, 0
	 v21 = 71+10.12, h1, 22+1./12
	 v22 = 47+9./12, h1, 22+1./12
	 v23 = 47+9./12, h1, 0
	
	*/
	/*2nd Floor Balcony Faces
	 Face1
	 v24 = 0, h1, 0
	 v25 = 0, h1, 23+2./12
	 v26 = 50, h1, 23+2./12
	 v27 = 50, h1, 0
	 Face2
	 v28 = 0, h1, 10+3./12
	 v29 = -(11+8.5/12), h1, 10+3./12
	 v30 = -(11+8.5/12), h1, 118+9./12
	 v31 = 0, h1, 118+9./12
	 Face3
	 v32 = -(11+8.5/12), h1, 118+9./12
	 v33 = -(11+8.5/12), h1, 131+8./12
	 v34 = 181+8.5/12, h1, 131+8./12
	 v35 = 181+8.5/12, h1, 118+9./12
	 Face4
	 v36 = 170, h1, 10+3./12
	 v37 = 170, h1, +10, 118+9./12
	 v38 = 181+8.5/12, h1, 118+9./12
	 v39 = 181+8.5/12, h1, 10+3./12
	 Face5
	 v40 = 72, h1, 0
	 v41 = 72, h1, 23+2./12
	 v42 = 170, h1, 23+2./12
	 v43 = 170, h1, 0
	 Face6
	 v44 = 50, h1, 10+3./12
	 v45 = 50, h1, 23+2./12
	 v46 = 72, h1, 23+2./12
	 v47 = 72, h1, 10+3./12
	 
	 2nd Floor
	 v48 = 0, h1, 23+2./12
	 v49 = 0, h1, 118+9./12
	 v50 = 170, h1, 118+9./12
	 v51 = 170, h1, 23+2./12
	 
	 v52 = 0, h2, 23+2./12
	 v53 = 0, h2, 118+9./12
	 v54 = 170, h2, 118+9./12
	 v55 = 170, h2, 23+2./12
	 
	 */
	/*3rd Floor
	v56 = 0, h2, 23+2./12
	 v57 = 0, h2, 118+9./12
	 v58 = 170, h2, 118+9./12
	 v59 = 170, h2, 23+2./12
	 
	 v60 = 0, h3, 23+2./12
	 v61 = 0, h3, 118+9./12
	 v62 = 170, h3, 118+9./12
	 v63 = 170, h3, 23+2./12
	Roof
	v64 = -(13+4.5/12), h3, -(13+4.5/12)
	v65 = -(13+4.5/12), h3, 108+11.5/12
	v66 = 180+11.5/12, h3, 108+11.5/12
	v67 = 180+11.5/12, h3, -(13+4.5/12)
	*/
	
	static final double [] vertices = {
		0, h1, 0, 0, 0, 0, 0, 0, 117+8./12, 0, h1, 117+8./12, //v12-v0-v1-v13
		0, h1, 117+8./12, 0, 0, 117+8./12, 167+7./12, 0, 117+8./12, 167+7./12, h1, 117+8./12, //v13-v1-v2-v14
		167+7./12, h1, 117+8./12, 167+7./12, 0, 117+8./12, 167+7./12, 0, 45+8./12, 167+7./12, h1, 45+8./12, //v14-v2-v3-v15
		167+7./12, h1, 45+8./12, 167+7./12, 0, 45+8./12, 179+7./12, 0, 45+8./12, 179+7./12, h1, 45+8./12, //v15-v3-v4-v16
		179+7./12, h1, 45+8./12, 179+7./12, 0, 45+8./12, 179+7./12, 0, 10, 179+7./12, h1, 10, //v16-v4-v5-v17
		179+7./12, h1, 10, 179+7./12, 0, 10, 167+7./12, 0, 10, 167+7./12, h1, 10, //v17-v5-v6-v18
		167+7./12, h1, 10, 167+7./12, 0, 10, 167+7./12, 0, 0, 167+7./12, h1, 0, //v18-v6-v7-v19
		167+7./12, h1, 0, 167+7./12, 0, 0, 71+10./12, 0, 0, 71+10./12, h1, 0, //v19-v7-v8-v20
		71+10./12, h1, 0, 71+10./12, 0, 0, 71+10.12, 0, 22+1./12, 71+10.12, h1, 22+1./12, //v20-v8-v9-v21
		71+10.12, h1, 22+1./12, 71+10.12, 0, 22+1./12, 47+9./12, 0, 22+1./12, 47+9./12, h1, 22+1./12,//v21-v9-v10-v22
		47+9./12, h1, 22+1./12, 47+9./12, 0, 22+1./12, 47+9./12, 0, 0, 47+9./12, h1, 0,//v22-v10-v11-v23
		47+9./12, h1, 0, 47+9./12, 0, 0, 0, 0, 0, 0, h1, 0,//v23-v11-v0-v12
		//Balcony
		0, h1, 0, 0, h1, 23+2./12, 50, h1, 23+2./12, 50, h1, 0, //B1: v24-v25-v26-v27
		0, h1, 10+3./12, -(11+8.5/12), h1, 10+3./12, -(11+8.5/12), h1, 118+9./12, 0, h1, 118+9./12, //B2: v28-v29-v30-v31
		-(11+8.5/12), h1, 118+9./12, -(11+8.5/12), h1, 131+8./12, 181+8.5/12, h1, 131+8./12, 181+8.5/12, h1, 118+9./12, //B3: v32-v33-v34-v35
		170, h1, 10+3./12, 170, h1, +10, 118+9./12, 181+8.5/12, h1, 118+9./12, 181+8.5/12, h1, 10+3./12, //B4:v36-v37-v38-v39
		72, h1, 0, 72, h1, 23+2./12, 170, h1, 23+2./12, 170, h1, 0, //B5: v40-v41-v42-v43
		50, h1, 10+3./12, 50, h1, 23+2./12, 72, h1, 23+2./12, 72, h1, 10+3./12, //B6: v44-v45-v46-v47
		//Floor2
		0, h2, 23+2./12, 0, h1, 23+2./12, 0, h1, 118+9./12, 0, h2, 118+9./12, //v52-v48-v49-v53
		0, h2, 118+9./12, 0, h1, 118+9./12, 170, h1, 118+9./12, 170, h2, 118+9./12, //v53-v49-v50-v54
		170, h2, 118+9./12, 170, h1, 118+9./12, 170, h1, 23+2./12, 170, h2, 23+2./12, //v54-v50-v51-v55
		170, h2, 23+2./12, 170, h1, 23+2./12, 0, h1, 23+2./12, 0, h2, 23+2./12, //v55-v51-v48-v52
		//Floor3
		0, h3, 23+2./12, 0, h2, 23+2./12, 0, h2, 118+9./12, 0, h3, 118+9./12, //v60-v56-v57-v61
		0, h3, 118+9./12, 0, h2, 118+9./12, 170, h2, 118+9./12, 170, h3, 118+9./12, //v61-v57-v58-v62
		170, h3, 118+9./12, 170, h2, 118+9./12, 170, h2, 23+2./12, 170, h3, 23+2./12, //v62-v58-v59-v63
		170, h3, 23+2./12, 170, h2, 23+2./12, 0, h2, 23+2./12, 0, h3, 23+2./12, //v63-v59-v56-v60
		//Roof
        -(13+4.5/12), h3, -(13+4.5/12), -(13+4.5/12), h3, 108+11.5/12, 180+11.5/12, h3, 108+11.5/12, 180+11.5/12, h3, -(13+4.5/12) //v64-v65-v66-v67		
	};
	
	static final double [] normals = {
		//Floor1
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1,
		//Balcony
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 
		//Floor2
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 
		//Floor3
		-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 
		0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 
		1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 
		0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 
		//Roof
		0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0 
	};
	
	static final double [] colors = {
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	};
	
	static final byte [] indices = {
		1, 2, 3, 4, 
		5, 6, 7, 8, 
		9, 10, 11, 12, 
		13, 14, 15, 16, 
		17, 18, 19, 20, 
		21, 22, 23, 24, 
		25, 26, 27, 28,
		29, 30, 31, 32, 
		33, 34, 35, 36, 
		37, 38, 39, 40, 
		41, 42, 43, 44, 
		45, 46, 47, 48, 
		
		49, 50, 51, 52,
		53, 54, 55, 56, 
		57, 58, 59, 60,
		61, 62, 63, 64,
		65, 66, 67, 68,
		69, 70, 71, 72,
		
		73, 74, 75, 76,
		77, 78, 79, 80,
		81, 82, 83, 84,
		85, 86, 87, 88,
		
		89, 90, 91, 92,
		93, 94, 95, 96,
		97, 98, 99, 100, 
		101, 102, 103, 104,
		
		105, 106, 107, 108
	};
	 public void createBuffers() {
	        //note length of vertices, normals, and colors should all be the same!
	        try {
	        	for(int i = 0; i < vertices.length; i++){
	        		vertices[i] = Util.feetToGL(vertices[i]);
	        	}
	            vertBuffer = BufferUtil.newDoubleBuffer(vertices.length);
	            colorBuffer = BufferUtil.newDoubleBuffer(vertices.length);
	            normalBuffer = BufferUtil.newDoubleBuffer(vertices.length);
	            faceBuffer = BufferUtil.newByteBuffer(indices.length);
	            
	            vertBuffer.put(vertices);
	            colorBuffer.put(colors);
	            normalBuffer.put(normals);
	            faceBuffer.put(indices);

	            vertBuffer.rewind();
	            colorBuffer.rewind();
	            normalBuffer.rewind();
	            faceBuffer.rewind();
	        } catch (Exception e) {
	            System.out.println("Error creating buffers \n" + e);
	        }


	    }
		@Override
		public void draw(GL gl) {
			gl.glPushMatrix();
			gl.glTranslated(position[0], position[1], position[2]);
			gl.glEnableClientState(GL.GL_VERTEX_ARRAY);
	        gl.glEnableClientState(GL.GL_COLOR_ARRAY);
	        gl.glEnableClientState(GL.GL_NORMAL_ARRAY);
	 
	        gl.glVertexPointer(3, GL.GL_DOUBLE, 0, vertBuffer);
	        gl.glColorPointer(3, GL.GL_DOUBLE, 0, colorBuffer);
	        gl.glNormalPointer(GL.GL_DOUBLE,0, normalBuffer);
	        
	        gl.glDrawElements(GL.GL_QUADS, indices.length, GL.GL_UNSIGNED_BYTE, faceBuffer);
	        
	        gl.glDisableClientState(GL.GL_VERTEX_ARRAY);
	        gl.glDisableClientState(GL.GL_COLOR_ARRAY);
	        gl.glDisableClientState(GL.GL_NORMAL_ARRAY);
	        gl.glPopMatrix();
		}
	@Override
	public void init(GL gl) {
		// TODO Auto-generated method stub
		
	}

}
